setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./mappings.R")
source("./hypothesis_tests.R")
source("./mappings.R")
source("./mappings.R")
source('~/GitHub/hypegrammaR/R/mappings.R')
source("./mappings.R")
source("./summary_statistics.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
data_ref <- reachR:::read.csv.auto.sep("data/Kampala_AGORA_HH_Refugees_10052018.csv")
library(data.table)
library(reachR)
data_ref <- reachR:::read.csv.auto.sep("data/Kampala_AGORA_HH_Refugees_10052018.csv")
library(dplyr)
data_ref <- reachR:::read.csv.auto.sep("data/Kampala_AGORA_HH_Refugees_10052018.csv")
data_ref <- data_ref[c(1:706),]
data_ref %>% tail
split.value <- "sample"
weight.column <- "weight"
comparison <- aggregate_percent_weighted(df = data_ref, weight.by = weight.column, split.by = split.value, write.to.file = "./comparison_bias_percent.csv")
reachR:::wtd.table.fraction
weights_ref <- as.numeric(gsub(",", ".", data_ref$weight))
strata_ref <- data_ref$name.slum
library(survey)
design <- svydesign(ids=~0, weights = weights_ref, strata = strata_ref, data = data_ref, na.rm = T)
independent.var <- "sample"
dependent.var <- "age"
data_ref$'independent.var' <- as.numeric(gsub(",", ".",data_ref$age))
data_ref$'independent.var'
data_ref <- reachR:::read.csv.auto.sep("data/Kampala_AGORA_HH_Refugees_10052018.csv")
data_ref <- data_ref[c(1:706),]
data_ref %>% tail
weights_ref <- as.numeric(gsub(",", ".", data_ref$weight))
strata_ref <- data_ref$name.slum
library(survey)
design <- svydesign(ids=~0, weights = weights_ref, strata = strata_ref, data = data_ref, na.rm = T)
independent.var <- "sample"
dependent.var <- "age"
data_ref$'dependent.var' <- as.numeric(gsub(",", ".",data_ref$'dependent.var'))
data_ref$'dependent.var'
data_ref$'independent.var'
data_ref$age
dependent.var
data_ref$get(dependent.var)
data_ref$'dependent.var'
data_ref$'independent.var'
data_ref$'independent.var'
age <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
#bias estimation
source("./hypothesis_tests.R")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
#bias estimation
source("./hypothesis_tests.R")
data_ref$age <- as.numeric(gsub(",", ".",data_ref$age))
age <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
debug(hypothesis_test_t_two_sample)
age <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
ttest <- svyttest(formula(formula_string), design, na.rm = TRUE)
undebug(hypothesis_test_t_two_sample)
debug(svyglm)
age <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
hypothesis_test_t_two_sample <- function(independent.var = independent.var,
dependent.var = data.dependent.var,
design){
formula_string<-paste0(dependent.var, "~", independent.var)
ttest <- svyttest(formula(formula_string), design, na.rm = TRUE)
results<-list()
results$test.results <- c(ttest$statistic, ttest$p.value)
results$test.parameters <- c(ttest$parameter, ttest$method)
results$hypothesis_test<-"two sample ttest on difference in means"
return(results)
}
hypothesis_test_z <- function(independent.var = independent.var,
dependent.var = data.dependent.var,
design){
# .....
results<-list()
results$test.results <- c()
results$test.parameters <- c()
results$hypothesis_test<-""
return(results)
}
function (formula, design, subset = NULL, family = stats::gaussian(),
start = NULL, ...)
{
.svycheck(design)
UseMethod("svyglm", design)
}
age <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
undebug(svyglm)
svyglm(age~sample, design)
svyglm(sample~age, design)
data_ref$age <- as.numeric(gsub(",", ".",data_ref$age))
data_ref$age
data_ref$age
source('~/GitHub/hypegrammaR/R/analyse_indicator.R')
data_ref$age
age <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
library(dplyr)
library(data.table)
library(reachR)
library(survey)
independent.var <- "sample"
dependent.var <- "age"
data_ref$age <- as.numeric(gsub(",", ".",data_ref$age))
age <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
debug(svyglm)
age <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
data_ref <- data_ref[c(2:706),]
design <- svydesign(ids=~0, weights = weights_ref, strata = strata_ref, data = data_ref, na.rm = T)
split.value <- "sample"
weight.column <- "weight"
weights_ref <- as.numeric(gsub(",", ".", data_ref$weight))
strata_ref <- data_ref$name.slum
library(survey)
design <- svydesign(ids=~0, weights = weights_ref, strata = strata_ref, data = data_ref, na.rm = T)
independent.var <- "sample"
dependent.var <- "age"
data_ref$age <- as.numeric(gsub(",", ".",data_ref$age))
data_ref$age
age <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
svyglm(sample~age, design)
undebug(svyglm)
undebug(svyglm)
age <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
rm(list = ls())
#.install_reachR(T, branch = "master")
source("./scripts/data_check.R")
#.install_reachR(T,branch="develop")
require("reachR")
require("data.table")
library("reachR")
library("dplyr")
getwd()
parameters<-list()
parameters$RCID <- "LBY1702" # the reserach cycle ID
parameters$name<-"Protection_Benghazi" # name of the project
parameters$subset <- FALSE
parameters$cleaning_log_available <- FALSE
parameters$stratified<-FALSE
parameters$stratified<-FALSE
parameters$questionnaire_available <- FALSE
# WHERE IS THE DATA, AND WHAT ARE THE NAMES OF THE RELEVANT COLUMNS?
parameters$data_file<-"./data/LBY_1702_PM_MarchApril18_Benghazi_Final.csv"
parameters$data.uuid.column.name<-"_uuid"
# global aggregates?
parameters$do_global_counts<-F
parameters$do_global_percent<-F
parameters$do_global_median<-F
parameters$do_disaggregated_counts<-F
parameters$do_disaggregated_percent<- T
parameters$do_disaggregated_median <- T
parameters$disaggregate_by<-"key.info.site"
parameters$custom_analysis<-function(data){
print("hi")}
validate(parameters)
data %>% aggregate_median(aggregate_by = parameters$diaggregate_by
)
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- reachR:::read.csv.auto.sep(file = "data/LBY_1702_PM_MarchApril18_Benghazi_Final.csv")
if(parameters$do_disaggregated_median){
write.aggregation.results(results = data %>% aggregate_median(aggregate_by = parameters$diaggregate_by),
title= paste("Median for each", parameters$disaggregate_by),
page ="local_median")}
data$key.info.site
parameters$disaggregate_by
write.aggregation.results(results = data %>% aggregate_median(aggregate_by = parameters$diaggregate_by),
title= paste("Median for each", parameters$disaggregate_by),
page ="local_median")}
write.aggregation.results(results = data %>% aggregate_median(aggregate_by = parameters$diaggregate_by),
title= paste("Median for each", parameters$disaggregate_by),
page ="local_median")
debug(aggregate_median)
data %>% aggregate_median(aggregate_by = parameters$diaggregate_by)
data %>% aggregate_median(aggregate_by = parameters$diaggregate_by)
length(aggregate_by)
aggregate_by
data %>% aggregate_median(aggregate_by = parameters$diaggregate_by)
function (df, aggregate_by, write.to.file = NULL)
{
if (!is.data.frame(df)) {
stop("input for 'df' must be a data frame")
}
if (length(aggregate_by) != 1) {
stop("aggregate_by should be a single value matching exactly one of the data frame columns")
}
if (!(aggregate_by %in% names(df))) {
stop("aggregate_by must match one of the column names of the data frame")
}
numeric <- df %>% lapply(function(x) {
is.numeric.fuzzy(as.character(x))
}) %>% unlist
if (any(!numeric)) {
message(paste("aggregated by mode instead of median:",
paste(names(df)[!numeric], collapse = "\n"), collapse = "\n"))
}
df <- aggregate.data.frame(df, by = list(df[[aggregate_by]]),
FUN = medianORmode)
df <- df[, !names(df) %in% aggregate_by]
names(df)[names(df) == "Group.1"] <- aggregate_by
if (!is.null(write.to.file)) {
write.csv.untidy(df, write.to.file)
}
return(df)
}
aggregate_by
results = data %>% aggregate_median(aggregate_by = parameters$diaggregate_by
)
get(aggregate_by)
aggregate_by
parameters$disaggregate_by
undebug(aggregate_median)
aggregate_median(data, "key.info.site")
bla <- aggregate_median(aggregate_by = "key.info.site")
bla <- aggregate_median(data, aggregate_by = "key.info.site")
View(bla)
View(bla)
bla$consented.targeted.hh.income.source.first.income.source
bla$consented.targeted.safety.assessment
bla$consented.targeted.accomodation.expense
bla$consented.targeted.total.income
bla$consented.targeted.movement.restriction.reason
bla$consented.targeted.purchase.needs
aggregate_percent_weighted
aggregate_percent
aggregate_median
write.aggregation.results(results = data %>% aggregate_median(aggregate_by = parameters$diaggregate_by, ignore.missing.data = F),
title= paste("Median for each", parameters$disaggregate_by),
page ="local_median")}
data %>% aggregate_median(aggregate_by = parameters$diaggregate_by, ignore.missing.data = F)
source('~/GitHub/hypegrammaR/R/analyse_indicator.R')
data <- reachR:::read.csv.auto.sep("../validation/data/Kampala_AGORA_HH_Refugees_10052018.csv")
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
data <- reachR:::read.csv.auto.sep("./test_data/Kampala_AGORA_HH_Refugees_10052018.csv")
populations <- reachR:::weights_of(data)
data <- data %>%  filter(group != "#N/A")
#bias estimation
source("./hypothesis_tests.R")
source("./mappings.R")
#bias estimation
source("./R/hypothesis_tests.R")
source("./R/mappings.R")
source("./R/summary_statistics.R")
library(dplyr)
library(data.table)
library(reachR)
data_ref <- data_ref[c(2:706),]
data_ref <- reachR:::read.csv.auto.sep("data/Kampala_AGORA_HH_Refugees_10052018.csv")
data_ref <- data_ref[c(2:706),]
data_ref %>% tail
data_ref <- reachR:::read.csv.auto.sep("./test_data/Kampala_AGORA_HH_Refugees_10052018.csv")
data_ref <- data_ref[c(2:706),]
split.value <- "sample"
weight.column <- "weight"
comparison <- aggregate_percent_weighted(df = data_ref, weight.by = weight.column, split.by = split.value, write.to.file = "./comparison_bias_percent.csv")
weights_ref <- as.numeric(gsub(",", ".", data_ref$weight))
strata_ref <- data_ref$name.slum
library(survey)
design <- svydesign(ids=~0, weights = weights_ref, strata = strata_ref, data = data_ref, na.rm = T)
independent.var <- "sample"
dependent.var <- "age"
data_ref$age <- as.numeric(gsub(",", ".",data_ref$age))
data_ref$'independent.var'
data_ref$independent.var
summarise.result<- map_to_summary_statistic(case)
test.hypothesis <- map_to_hypothesis_test(case)
case <- 'CASE_group_difference_numerical_categorical'
summarise.result<- map_to_summary_statistic(case)
test.hypothesis <- map_to_hypothesis_test(case)
# apply the summary statistic, hypothesis test to the given data and survey design:
summary.result  <- summarise.result(dependent.var,independent.var, design)
r.hyp <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
independent.var <- "sample"
dependent.var <- "age"
data_ref$age <- as.numeric(gsub(",", ".",data_ref$age))
r.hyp <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
#bias estimation
source("./R/hypothesis_tests.R")
source("./R/mappings.R")
source("./R/summary_statistics.R")
library(dplyr)
library(data.table)
library(reachR)
data_ref <- reachR:::read.csv.auto.sep("./test_data/Kampala_AGORA_HH_Refugees_10052018.csv")
data_ref <- data_ref[c(2:706),]
data_ref %>% tail
split.value <- "sample"
weight.column <- "weight"
weights_ref <- as.numeric(gsub(",", ".", data_ref$weight))
strata_ref <- data_ref$name.slum
library(survey)
design <- svydesign(ids=~0, weights = weights_ref, strata = strata_ref, data = data_ref, na.rm = T)
independent.var <- "sample"
dependent.var <- "age"
data_ref$age <- as.numeric(gsub(",", ".",data_ref$age))
weights_ref <- as.numeric(gsub(",", ".", data_ref$weight))
strata_ref <- data_ref$name.slum
library(survey)
data_ref$age <- as.numeric(gsub(",", ".",data_ref$age))
r.hyp <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
design <- svydesign(ids=~0, weights = weights_ref, strata = strata_ref, data = data_ref, na.rm = T)
r.hyp <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
r.sum <- confidence_intervals_num_groups(independent.var = independent.var, dependent.var = dependent.var, design)
r <- list()
r <- c(r, r.hyp, r.sum)
data_ref <- reachR:::read.csv.auto.sep("./test_data/Kampala_AGORA_HH_Refugees_10052018.csv")
data_ref <- data_ref[c(2:706),]
data_ref <- reachR:::read.csv.auto.sep("./test_data/Kampala_AGORA_HH_Refugees_10052018.csv")
data_ref <- data_ref[c(1:706),]
data_ref$hh.head.sex
dependent.var <- "hh.head.sex"
weights_ref <- as.numeric(gsub(",", ".", data_ref$weight))
strata_ref <- data_ref$name.slum
library(survey)
design <- svydesign(ids=~0, weights = weights_ref, strata = strata_ref, data = data_ref, na.rm = T)
#cat
r.hyp <- hypothesis_test_chisquared(independent.var = independent.var, dependent.var = dependent.var, design)
r.sum <- percent_with_confints(independent.var = independent.var, dependent.var = dependent.var, design)
r <- c(r, r.hyp, r.sum)
get(independent.var)
get(independent.var)
get(dependent.var)
name(dependent.var)
data_ref$how.long.lived
independent.var <- "sample"
dependent.var <- "hh.head.sex"
dependent.var <- "how.long.lived"
dependent.var <- "how.long.lived"
weights_ref <- as.numeric(gsub(",", ".", data_ref$weight))
strata_ref <- data_ref$name.slum
library(survey)
design <- svydesign(ids=~0, weights = weights_ref, strata = strata_ref, data = data_ref, na.rm = T)
#num
r.hyp <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
#cat
r.hyp <- hypothesis_test_chisquared(independent.var = independent.var, dependent.var = dependent.var, design)
r.sum <- percent_with_confints(independent.var = independent.var, dependent.var = dependent.var, design)
r <- c(r, dependent.var, r.hyp, r.sum)
data_ref$why.settle.security
independent.var <- "sample"
dependent.var <- "why.settle.security
data_ref$age <- as.numeric(gsub(",", ".",data_ref$age))
data_ref$male.adults <- as.numeric(gsub(",", ".",data_ref$male.adults), na.rm = T)
weights_ref <- as.numeric(gsub(",", ".", data_ref$weight))
strata_ref <- data_ref$name.slum
library(survey)
design <- svydesign(ids=~0, weights = weights_ref, strata = strata_ref, data = data_ref, na.rm = T)
#num
r.hyp <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
r.sum <- confidence_intervals_num_groups(independent.var = independent.var, dependent.var = dependent.var, design)
#cat
r.hyp <- hypothesis_test_chisquared(independent.var = independent.var, dependent.var = dependent.var, design)
r.sum <- percent_with_confints(independent.var = independent.var, dependent.var = dependent.var, design)
r <- c(r, dependent.var, r.hyp, r.sum)
case <- 'CASE_group_difference_numerical_categorical'
summary.statistics <- confidence_intervals_num_groups(dependent.var = dependent.var, independent.var, design = design, data = data_ref)
hypothesis.test.results <- hypothesis_test_t_two_sample(independent.var = independent.var, dependent.var = dependent.var, design)
#####################
make.data.frames <- function(comparicion){
x <- lapply(comparicion, function(t){
as.data.frame(t)})
return(x)}
df.results <- make.data.frames(comparison)
calculate.differences <- function(some){
diff <- lapply(some, function(h){
if(ncol(h) == 2){
abs(as.vector(h[,1]) - as.vector(h[,2]))}else{print("hi")}})
return(diff)}
differences <- calculate.differences(df.results)
summary(differences)
d <- sapply(ya, function(x){d <- which(ncol(x) == 2)})
summary(d)
differnces <- xo(ya)
#figure out the bias function better
independent.var <- "sample"
dependent.var <- "why.settle.security"
#cat
r.hyp <- hypothesis_test_chisquared(independent.var = independent.var, dependent.var = dependent.var, design)
r.sum <- percent_with_confints(independent.var = independent.var, dependent.var = dependent.var, design)
r <- c(r, dependent.var, r.hyp, r.sum)
